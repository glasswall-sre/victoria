:mod:`victoria.encryption.schemas`
==================================

.. py:module:: victoria.encryption.schemas

.. autoapi-nested-parse::

   victoria.encryption.schemas

   Marshmallow schemas for the encryption functionality.

   Author:
       Ash Powell <apowell@glasswallsolutions.com>



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   victoria.encryption.schemas.EncryptionEnvelopeSchema
   victoria.encryption.schemas.EncryptionEnvelope
   victoria.encryption.schemas.EncryptionProviderConfigSchema
   victoria.encryption.schemas.EncryptionProviderConfig



.. py:class:: EncryptionEnvelopeSchema(*, only: types.StrSequenceOrSet = None, exclude: types.StrSequenceOrSet = (), many: bool = False, context: typing.Dict = None, load_only: types.StrSequenceOrSet = (), dump_only: types.StrSequenceOrSet = (), partial: typing.Union[bool, types.StrSequenceOrSet] = False, unknown: str = None)

   Bases: :class:`marshmallow.Schema`

   Marshmallow schema for an EncryptionEnvelope.

   Fields:
       data (str): The base64-encoded encrypted data.
       key (str): The base64-encoded encrypted data encryption key.
       iv (str): The base64-encoded nonce.
       version (str): The version of the key encryption key used.

   .. attribute:: data
      

      

   .. attribute:: key
      

      

   .. attribute:: iv
      

      

   .. attribute:: version
      

      

   .. method:: make_encryption_envelope(self, data, **kwargs)




.. py:class:: EncryptionEnvelope(data: str, key: str, iv: str, version: str)

   Stores data that has been envelope encrypted.

   .. attribute:: data

      The base64-encoded encrypted data.

      :type: str

   .. attribute:: key

      The base64-encoded encrypted data encryption key.

      :type: str

   .. attribute:: iv

      The base64-encoded nonce.

      :type: str

   .. attribute:: version

      The version of the key encryption key used.

      :type: str

   See:
       https://cloud.google.com/kms/docs/envelope-encryption


.. py:class:: EncryptionProviderConfigSchema(*, only: types.StrSequenceOrSet = None, exclude: types.StrSequenceOrSet = (), many: bool = False, context: typing.Dict = None, load_only: types.StrSequenceOrSet = (), dump_only: types.StrSequenceOrSet = (), partial: typing.Union[bool, types.StrSequenceOrSet] = False, unknown: str = None)

   Bases: :class:`marshmallow.Schema`

   Marshmallow schema for the encryption provider config in Victoria core
   config.

   Fields:
       provider (str): The type of the provider.
       config (Mapping[str, str]): Params to pass to the constructor of the
           encryption provider implementation.

   .. attribute:: provider
      

      

   .. attribute:: config
      

      

   .. method:: make_encryption_provider_config(self, data, **kwargs)




.. py:class:: EncryptionProviderConfig(provider: str, config: dict)

   Stores config for Victoria's encryption providing functionality.

   .. attribute:: provider

      The type of the provider.

      :type: str

   .. attribute:: config

      Params to pass to the constructor of the
      encryption provider implementation.

      :type: Mapping[str, str]

   .. method:: to_yaml(cls, dumper, data)
      :classmethod:




